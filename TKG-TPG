<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Live Table from Google Sheets</title>
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet"/>
  <style>
    body { font-family: 'Segoe UI', sans-serif; padding: 1rem; background: #fff; font-size: 0.85rem; color: #333; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 6px; border: 1px solid #ccc; text-align: left; }
    .highlight { background: yellow; }
    .loader-overlay { position: fixed; inset: 0; display: flex; justify-content: center; align-items: center; background: rgba(255,255,255,0.7); z-index: 999; }
    .badge.triwulan-i { background: #e0f7fa; padding: 2px 6px; border-radius: 4px; }
    .badge.triwulan-ii { background: #ffe0b2; padding: 2px 6px; border-radius: 4px; }
  </style>
</head>
<body>

  <div id="loader" class="loader-overlay" style="display:none;">
    <div>
      <p style="font-size:1.5rem; color:#555;">Loading data...</p>
    </div>
  </div>

  <div class="filter-row">
    <select id="filterJenisSatdik"><option value="">[ Pilih Satdik ]</option></select>
    <select id="filterJenisTriwulan"><option value="">[ Pilih Triwulan ]</option></select>
    <select id="filterJenisPemda"><option value="">[ Pilih Pemda ]</option></select>
    <select id="filterJenisTunjangan"><option value="">[ Pilih Tunjangan ]</option></select>
    <input type="text" id="searchInput" placeholder="Search..." oninput="debounceSearch(); toggleClear()" />
    <button onclick="clearSearch()" id="clearBtn" style="display: none;">&times;</button>
    <button onclick="resetFilters()">Reset</button>
  </div>

  <div id="tableContainer"></div>

  <div class="pagination-container">
    <label>Tampilkan <select id="rowsPerPageSelect" onchange="changeRowsPerPage()">
      <option>10</option><option>20</option><option>50</option><option>100</option><option value="9999">Semua</option>
    </select></label>
    <span id="count-display"></span>
    <div id="pagination-controls"></div>
  </div>

  <div id="noResults" style="display:none;">No matching results found.</div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script>
    let rawData = [], headers = [], currentPage = 1, rowsPerPage = 10;
    const headerConfig = {
      "NIP": "NIP", "NAMA": "Nama", "NAMA PEMILIK REKENING": "Nama Pemilik Rekening",
      "NO. REKENING": "No. Rekening", "SATDIK": "Satdik", "JENIS TUNJANGAN": "Jenis Tunjangan",
      "PEMDA": "Kab / Kota", "SALUR BRUTO": "Salur Bruto", "PPH": "PPH",
      "POT. JKN": "Pot. JKN", "SALUR NETTO": "Salur Netto", "TRIWULAN": "Triwulan"
    };

    const GAS_URL = 'https://script.google.com/macros/s/AKfycbxWmms8diuca1VA2W7aC-7DdFFX0VQ4bt-g_T2XmWf3XtYli1pgLNOdpDZHRj4HIHbt/exec';

    async function init() {
      document.getElementById("loader").style.display = "flex";
      try {
        const res = await fetch(GAS_URL);
        const json = await res.json();
        if (!json.length) throw new Error("No data");
        headers = Object.keys(json[0]);
        rawData = json.map(row => headers.map(h => row[h]));
        populateFilters();
        search();
      } catch (err) {
        alert("Failed to load data");
        console.error(err);
      } finally {
        document.getElementById("loader").style.display = "none";
      }
    }

    function populateFilters() {
      const sets = { Satdik: new Set(), Triwulan: new Set(), Pemda: new Set(), Tunjangan: new Set() };
      const getIndex = name => headers.findIndex(h => h.toLowerCase() === name.toLowerCase());

      rawData.forEach(row => {
        sets.Satdik.add(row[getIndex("satdik")]);
        sets.Triwulan.add(row[getIndex("triwulan")]);
        sets.Pemda.add(row[getIndex("pemda")]);
        sets.Tunjangan.add(row[getIndex("jenis tunjangan")]);
      });

      for (let key in sets) {
        const id = "filterJenis" + key;
        const el = document.getElementById(id);
        el.innerHTML = `<option value="">[ Pilih ${key} ]</option>`;
        [...sets[key]].sort().forEach(val => el.innerHTML += `<option value="${val}">${val}</option>`);
        $(el).select2({ width: 'resolve' }).on('change', () => { currentPage = 1; search(); });
      }
    }

    function debounceSearch() {
      clearTimeout(window.debounceTimer);
      currentPage = 1;
      window.debounceTimer = setTimeout(search, 300);
    }

    function toggleClear() {
      document.getElementById("clearBtn").style.display = document.getElementById("searchInput").value ? "inline" : "none";
    }

    function clearSearch() {
      document.getElementById("searchInput").value = "";
      toggleClear();
      currentPage = 1;
      search();
    }

    function resetFilters() {
      ["Satdik", "Triwulan", "Pemda", "Tunjangan"].forEach(key => $(`#filterJenis${key}`).val(null).trigger("change"));
      clearSearch();
    }

    function getFilteredData() {
      const filters = {
        satdik: document.getElementById("filterJenisSatdik").value.trim().toUpperCase(),
        triwulan: document.getElementById("filterJenisTriwulan").value.trim().toUpperCase(),
        pemda: document.getElementById("filterJenisPemda").value.trim().toUpperCase(),
        tunjangan: document.getElementById("filterJenisTunjangan").value.trim().toUpperCase()
      };
      const idx = k => headers.findIndex(h => h.toLowerCase() === k);
      return rawData.filter(row =>
        (!filters.satdik || row[idx("satdik")].toUpperCase() === filters.satdik) &&
        (!filters.triwulan || row[idx("triwulan")].toUpperCase() === filters.triwulan) &&
        (!filters.pemda || row[idx("pemda")].toUpperCase() === filters.pemda) &&
        (!filters.tunjangan || row[idx("jenis tunjangan")].toUpperCase() === filters.tunjangan)
      );
    }

    function changeRowsPerPage() {
      rowsPerPage = parseInt(document.getElementById("rowsPerPageSelect").value, 10);
      currentPage = 1;
      search();
    }

    function highlightSearch(text, term) {
      return !term ? text : text.replace(new RegExp(`(${term})`, "gi"), '<span class="highlight">$1</span>');
    }

    function search() {
      const q = document.getElementById("searchInput").value.trim().toLowerCase();
      let filtered = getFilteredData();
      if (q) filtered = filtered.filter(row => row.some(cell => String(cell).toLowerCase().includes(q)));
      showTable(filtered);
    }

    function showTable(data) {
      const container = document.getElementById("tableContainer");
      const countDisplay = document.getElementById("count-display");
      const noResults = document.getElementById("noResults");
      if (!data.length) {
        container.innerHTML = "";
        countDisplay.textContent = "";
        noResults.style.display = "block";
        return;
      }
      noResults.style.display = "none";
      const total = data.length;
      const totalPages = Math.ceil(total / rowsPerPage);
      if (currentPage > totalPages) currentPage = 1;
      const start = (currentPage - 1) * rowsPerPage;
      const pageData = data.slice(start, start + rowsPerPage);
      countDisplay.textContent = `${start + 1}â€“${Math.min(start + rowsPerPage, total)} dari ${total} Data`;

      const visibleHeaders = headers.filter(h => headerConfig[h] !== null);
      let html = `<table><thead><tr><th>No</th>${visibleHeaders.map(h => `<th>${headerConfig[h]}</th>`).join('')}</tr></thead><tbody>`;
      pageData.forEach((row, i) => {
        html += `<tr><td>${start + i + 1}</td>` +
          visibleHeaders.map(h => {
            const idx = headers.indexOf(h);
            let val = String(row[idx] ?? "").trim();
            let display = highlightSearch(capitalizeWords(val), document.getElementById("searchInput").value.trim());
            if (h.toLowerCase() === "triwulan") {
              const cls = val.toLowerCase() === "i" ? "triwulan-i" : "triwulan-ii";
              display = `<span class="badge ${cls}">${display}</span>`;
            }
            return `<td title="${val.replace(/"/g, '&quot;')}">${display}</td>`;
          }).join('') + `</tr>`;
      });
      html += `</tbody></table>`;
      container.innerHTML = html;
      renderPaginationControls(total);
    }

    function capitalizeWords(str) {
      return str.toLowerCase().replace(/\b\w/g, l => l.toUpperCase());
    }

    function renderPaginationControls(totalItems) {
      const wrapper = document.getElementById("pagination-controls");
      wrapper.innerHTML = "";
      const totalPages = Math.ceil(totalItems / rowsPerPage);
      if (totalPages <= 1) return;

      const createBtn = (label, page, isActive, disabled) => {
        const btn = document.createElement("button");
        btn.textContent = label;
        if (isActive) btn.classList.add("active");
        if (disabled) btn.disabled = true;
        btn.onclick = () => { currentPage = page; search(); };
        return btn;
      };

      wrapper.appendChild(createBtn("<", currentPage - 1, false, currentPage === 1));
      for (let i = 1; i <= totalPages; i++) {
        if (i === 1 || i === totalPages || (i >= currentPage - 1 && i <= currentPage + 1)) {
          wrapper.appendChild(createBtn(i, i, i === currentPage));
        } else if (i === currentPage - 2 || i === currentPage + 2) {
          const span = document.createElement("span");
          span.textContent = "...";
          wrapper.appendChild(span);
        }
      }
      wrapper.appendChild(createBtn(">", currentPage + 1, false, currentPage === totalPages));
    }

    window.onload = init;
  </script>
</body>
</html>
